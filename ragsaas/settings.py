"""
Django settings for ragsaas project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from django.conf import settings
from pathlib import Path
from datetime import timedelta
from celery.schedules import crontab
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
GOOGLE_DRIVE_CREDENTIALS = BASE_DIR / 'clientadmin' / 'credentials.json'
SSL_CERT_PATH = os.path.join(BASE_DIR, 'certs', 'us-east-1-bundle.pem')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z7gt0pgkofw1nx^4e4*s-icg+^+_=_$7i=p^mn_c+8wymv$@5w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'allauth',
    'allauth.account',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'corsheaders',
    'storages',
    'account',
    'accountprofile',
    'allauth.socialaccount',  # Allauth's social account management
    'allauth.socialaccount.providers.google', 
    'clientadmin',
    'superadmin',
    'clientuser',
    'helper',

    # Celery-related apps
    'django_celery_results',  # To store Celery task results in the database
    'django_celery_beat',  # To schedule periodic tasks using Celery beat
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    "allauth.account.middleware.AccountMiddleware",
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ragsaas.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',

]


WSGI_APPLICATION = 'ragsaas.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_USER_MODEL = 'user_account.User'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=2),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=5),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    'TOKEN_BLACKLIST': 'rest_framework_simplejwt.token_blacklist.models.OutstandingToken',
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        
    ),
    
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CORS_ALLOW_ALL_ORIGINS= True



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587  # Use 587 for TLS, 465 for SSL
EMAIL_USE_TLS = True  # Use True for TLS, False for SSL
EMAIL_HOST_USER ='engrharis0@gmail.com'
EMAIL_HOST_PASSWORD ='mhxz xbnw zoiq asiz'
DEFAULT_FROM_EMAIL = 'engrharis0@gmail.com'


# AWS S3 Configuration
AWS_ACCESS_KEY_ID = 'AWSEDRTFGYUIJOKJLMRTYUIIHTYUIJ'
AWS_SECRET_ACCESS_KEY = 'AWSEDRTFGYUIJOKJLMRTYUIIHTYUIJAWSEDRTFGYUIJOKJLMRTYUIIHTYUIJ'
AWS_STORAGE_BUCKET_NAME = 'ragai'
AWS_S3_REGION_NAME = 'us-east-1'
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

# Tell Django to use S3 for file storage
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# The URL that will be used to access the files
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'


import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Access the Pinecone and OpenAI API keys
PINECONE_API_KEY = "e1b1b1b1-1b1b-1b1b-1b1b-1b1b1b1b1b1b"
# os.getenv('PINECONE_API_KEY')
OPENAI_API_KEY = "123456789uyfdxcfvbhjnkmlhgfdxecrfvgbhne3456789"
# os.getenv('OPENAI_API_KEY')
ANTHROPIC_API_KEY='ass-sxfsxcrcrtwertyunn-trtyup-ouyfdvbnm'


# Set the maximum request data upload size (in bytes)
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100MB

# Set the maximum file upload size (in bytes)
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100MB



# Google Drive OAuth settings
GOOGLE_DRIVE_CLIENT_ID = '23456786trerftgyhuikjhgfdssxcvb'
GOOGLE_DRIVE_CLIENT_SECRET = 'qwertyukjgfdsdfghjk1234567890-ytrdcvbnmuytredfgh'
GOOGLE_DRIVE_REDIRECT_URI = "https://ragai.octalooptechnologies.com/api/google-drive/oauth2callback/"
GOOGLE_DRIVE_AUTH_URI = 'https://accounts.google.com/o/oauth2/auth'
GOOGLE_DRIVE_TOKEN_URI = 'https://oauth2.googleapis.com/token'  



# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

# Enable Celery beat scheduler
CELERY_BEAT_SCHEDULE = {
    'check-google-drive-every-5-minutes': {
        'task': 'clientadmin.tasks.check_google_drive',
        'schedule': crontab(minute='*/5'),
    },
}

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'



# Microsoft OAuth settings
MICROSOFT_OAUTH_CLIENT_ID = '1234567890-uytrewqasdfghjklmnbvcxz'
MICROSOFT_OAUTH_CLIENT_SECRET = 'qwertyuioplkjhgfdsazxcvbnm1234567890'
MICROSOFT_OAUTH_TENANT_ID = '0ijhvcxzsdfr534567890tresxcfghjuyt'  # If using single tenant
MICROSOFT_OAUTH_REDIRECT_URI = 'https://ragai.octalooptechnologies.com/api/microsoft/callback/'  # Must match Azure registration
MICROSOFT_OAUTH_SCOPES = ['Files.Read']  # Adjust scopes as needed

#  client_id = "a48677cf-9c3f-47d0-ac5a-4282648d97f4"